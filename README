NAME
    Const::Exporter - Declare constants for export.

SYNOPSIS
    Define a constants module:

      package MyApp::Constants;

      use Const::Fast;

      our $zoo => 1234;

      use Const::Exporter

         tag_a => [                  # use MyApp::Constants /:tag_a/;
            'foo'  => 1,             # exports "foo"
            '$bar' => 2,             # exports "$bar"
            '@baz' => [qw/ a b c /], # exports "@baz"
            '%bo'  => { a => 1 },    # exports "%bo"
         ],

         tag_b => [                  # use MyApp::Constants /:tag_b/;
            'foo',                   # exports "foo" (same as from ":tag_a")
            '$zoo',                  # exports "$zoo" (as defined above)
         ];

      # `use Const::Exporter` can be specified multiple times

      use Const::Exporter

         tag_b => [                 # we can add symbols to ":tab_b"
            'moo' => $bar,          # exports "moo" (same value as "$bar")
         ],

         enums => [

           [qw/ goo gab gub /] => 0, # exports enumerated symbols, from 0..2

         ],

         default => [qw/ fo $bar /]; # exported by default

    and use that module:

      package MyApp;

      use MyApp::Constants qw/ $zoo :tag_a /;

      ...

DESCRIPTION
    This module allows you to declare constants that can be exported to
    other modules.

    To declare constants, simply group then into export tags:

      package MyApp::Constants;

      use Const::Exporer

        tag_a => [
           'foo' => 1,
           'bar' => 2,
        ],

        tag_b => [
           'baz' => 3,
           'bar',
        ],

        default => [
           'foo',
        ];

    Constants in the "default" tag are exported by default (that is, they
    are added to the `@EXPORTS' array).

    When a constant is already defined in a previous tag, then no value is
    specified for it. (For example, "bar" in "tab_b" above.) If you do give
    a value, Const::Exporter will assume it's another symbol.

    Your module can include multiple calls to `use Const::Exporter', so that
    you can reference constants in other expressions, e.g.

      use Const::Exporter

        tag => [
            '$zero' => 0,
        ];

      use Const::Exporter

        tag => [
            '$one' => 1 + $zero,
        ];

    or even something more complex:

      use Const::Exporter

         http_ports => [
            'HTTP'     => 80,
            'HTTP_ALT' => 8080,
            'HTTPS'    => 443,
         ];

      use Const::Exporter

         http_ports => [
            '@HTTP_PORTS' => [ HTTP, HTTP_ALT, HTTPS ],
         ];

    Constants can include traditional constant symbols, as well as scalars,
    arrays or hashes.

    Constants can include values defined elsewhere in the code, e.g.

      our $foo;

      BEGIN {
         $foo = calculate_value_for_constant();
      }

      use Const::Exporer

        tag => [ '$foo' ];

    Note that this will make the symbol read-only. You don't need to
    explicitly declare it as such.

    Enumerated constants are also supported:

      use Const::Exporer

        tag => [

          [qw/ foo bar baz /] => 1,

        ];

    will define the symbols `foo' (1), `bar' (2) and `baz' (3).

    You can also specify a list of numbers, if you want to skip values:

      use Const::Exporer

        tag => [

          [qw/ foo bar baz /] => [1, 4],

        ];

    will define the symbols `foo' (1), `bar' (4) and `baz' (5).

    You can even specify string values:

      use Const::Exporer

        tag => [

          [qw/ foo bar baz /] => [qw/ feh meh neh /],

        ];

    however, this is equivalent to

      use Const::Exporer

        tag => [
          'foo' => 'feh',
          'bar' => 'meh',
          'baz' => 'neh',
        ];

  Mixing POD with Tags
    The following code is a syntax error, at least with some versions of
    Perl:

      use Const::Exporter

      =head2 a

      =cut

        a => [ foo => 1 ],

      =head2 b

      =cut

        b => [ bar => 2 ];

    If you want to mix POD with your declarations, use multiple use lines,
    e.g.

      =head2 a

      =cut

      use Const::Exporter
        a => [ foo => 1 ];

      =head2 b

      =cut

      use Const::Exporter
        b => [ bar => 2 ];

  Export Tags
    By default, all symbols are exportable (in `@EXPORT_OK'.)

    The `:default' tag is the same as not specifying any exports.

    The `:all' tag exports all symbols.

  Using as part of a module with exported functions
    Const::Exporter is not intended for use with modules that also export
    functions.

    There are workarounds that you can use, such as getting Const::Exporter
    to export your functions, or munging `@EXPORT' etc. separately, but
    these are not supported and changes in the future my break our code.

SEE ALSO
    See Exporter for a discussion of export tags.

  Similar Modules
    Exporter::Constants
        This module only allows you to declare function symbol constants,
        akin to the constant module, without tags.

    Constant::Exporter
        This module only allows you to declare function symbol constants,
        akin to the constant module, although you can specify tags.

    Constant::Export::Lazy
        This module only allows you to declare function symbol constants,
        akin to the constant module by defining functions that are only
        called as needed. The interface is rather complex.

AUTHOR
    Robert Rothenberg, `<rrwo at cpan.org>'

LICENSE AND COPYRIGHT
    Copyright 2014 Robert Rothenberg.

    This program is free software; you can redistribute it and/or modify it
    under the terms of the the Artistic License (2.0). You may obtain a copy
    of the full license at:

    http://www.perlfoundation.org/artistic_license_2_0

    Any use, modification, and distribution of the Standard or Modified
    Versions is governed by this Artistic License. By using, modifying or
    distributing the Package, you accept this license. Do not use, modify,
    or distribute the Package, if you do not accept this license.

    If your Modified Version has been derived from a Modified Version made
    by someone other than you, you are nevertheless required to ensure that
    your Modified Version complies with the requirements of this license.

    This license does not grant you the right to use any trademark, service
    mark, tradename, or logo of the Copyright Holder.

    This license includes the non-exclusive, worldwide, free-of-charge
    patent license to make, have made, use, offer to sell, sell, import and
    otherwise transfer the Package with respect to any patent claims
    licensable by the Copyright Holder that are necessarily infringed by the
    Package. If you institute patent litigation (including a cross-claim or
    counterclaim) against any party alleging that the Package constitutes
    direct or contributory patent infringement, then this Artistic License
    to you shall terminate on the date that such litigation is filed.

    Disclaimer of Warranty: THE PACKAGE IS PROVIDED BY THE COPYRIGHT HOLDER
    AND CONTRIBUTORS "AS IS' AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES.
    THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
    PURPOSE, OR NON-INFRINGEMENT ARE DISCLAIMED TO THE EXTENT PERMITTED BY
    YOUR LOCAL LAW. UNLESS REQUIRED BY LAW, NO COPYRIGHT HOLDER OR
    CONTRIBUTOR WILL BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, OR
    CONSEQUENTIAL DAMAGES ARISING IN ANY WAY OUT OF THE USE OF THE PACKAGE,
    EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

